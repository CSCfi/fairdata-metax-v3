# This file is used to configure your project.
# Read more about the various options under:
# http://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files

[metadata]
name = fairdata-metax-service
description = Metadata repository for Finnish research data
author = CSC
author-email = it-support@csc.fi
license = GNU GPLv2 License
long-description = file: README.md
long-description-content-type = text/markdown; charset=UTF-8; variant=GFM
url = https://metax.fairdata.fi

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src
# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
# setup_requires =
install_requires =
    django
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
# python_requires = >=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*

[options.packages.find]
where =
    src
    src/apps
    src/metax_service
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install metax_service[PDF]` like:
# PDF = ReportLab; RXP
# Add here test requirements (semicolon/line-separated)
testing =
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = metax_service.module:function
# For example:
# console_scripts =
#     fibonacci = metax_service.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
# Options for py.test:
# Specify command line options as you would do when invoking py.test directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
addopts =
    # --cov src
    # --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

pythonpath =
    src
#    apps
#    apps/core
#    metax_service
DJANGO_SETTINGS_MODULE = metax_service.settings
# Use pytest markers to select/deselect specific tests
markers =
    behave
    catalogrecord
    dataset
    qvain
    publish
    draft
    versioning
    file
    ida
    datacatalog
    unit
    adapter
    docs
    legacy
    provenance
    management
    stub: test is emulating functionality and must be replaced later
    concept
    auth
    contract
    only: Run only these tests

#     slow: mark tests as slow (deselect with '-m "not slow"')
django_find_project = false

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.3.1
package = metax_service
extensions =
    django
    no_skeleton
    tox
    markdown
    pyproject
