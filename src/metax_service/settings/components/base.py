"""
Django settings for metax_service project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from os.path import join
from pathlib import Path

import factory.random
from django.utils.translation import gettext_lazy as _
from environs import Env

env = Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
PROJECT_DIR = Path(__file__).resolve().parent.parent

ROOT_DIR = BASE_DIR.parent

APPS_DIR = join(BASE_DIR, "apps")

sys.path.append(APPS_DIR)

# collect static files here
STATIC_ROOT = os.environ.get("STATIC_ROOT", join(ROOT_DIR, "staticfiles"))

# collect media files here
MEDIA_ROOT = join(ROOT_DIR, "media")

# look for static assets here
STATICFILES_DIRS = [
    join(ROOT_DIR, "static"),
]

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "DJANGO_SECRET_KEY", "django-insecure-+#ohm#9qx8+2gc28g6%r8iww^8f&yye_)^-&=3x51kzw$&svk("
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", False)

# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "localhost,0.0.0.0,127.0.0.1,[::1]").split(", ")
INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
]
THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "django_extensions",
    "drf_yasg",
    "django_filters",
    "simple_history",
    "watchman",
    "polymorphic",
]
LOCAL_APPS = [
    "common.apps.CommonConfig",
    "users.apps.UsersConfig",
    "core.apps.CoreConfig",
    "refdata.apps.ReferenceDataConfig",
    "actors.apps.ActorsConfig",
    "files.apps.FilesConfig",
    "router.apps.RouterConfig",
]

INSTALLED_APPS = DEFAULT_APPS + THIRD_PARTY_APPS + LOCAL_APPS


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

ROOT_URLCONF = "metax_service.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "metax_service.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_DATABASE_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASS"),
        "HOST": os.getenv("POSTGRES_HOST", default="localhost"),
        "PORT": os.getenv("POSTGRES_PORT", default="5432"),
    }
}
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s " "%(process)d %(thread)d %(message)s"
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}


LANGUAGE_CODE = "en-us"
LANGUAGES = (("en-us", _("English")), ("fi", _("Finnish")))
LOCALE_PATHS = (os.path.join(APPS_DIR, "core/locale"),)
TIME_ZONE = "Europe/Helsinki"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model
AUTH_USER_MODEL = "users.MetaxUser"

# permissions
# https://www.django-rest-framework.org/api-guide/authentication/#setting-the-authentication-scheme
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "apps.common.pagination.OffsetPagination",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
}

SWAGGER_SETTINGS = {
    "DEEP_LINKING": True,  # Automatically update URL fragment with current operation in Swagger UI
}

FACTORY_BOY_RANDOM_SEED = "metax-service"

factory.random.reseed_random(FACTORY_BOY_RANDOM_SEED)


# Allow access to dataset file metadata models and serializers
# without depending explicitly on the core app
DATASET_FILE_METADATA_MODELS = {
    "file": "apps.core.models.file_metadata.DatasetFileMetadata",
    "directory": "apps.core.models.file_metadata.DatasetDirectoryMetadata",
}
DATASET_FILE_METADATA_SERIALIZERS = {
    "file": "apps.core.serializers.file_metadata_serializer.FileMetadataSerializer",
    "directory": "apps.core.serializers.file_metadata_serializer.DirectoryMetadataSerializer",
}

LEGACY_FILE_STORAGE_TO_V3_STORAGE_SERVICE = {
    "urn:nbn:fi:att:file-storage-ida": "ida",
    "urn:nbn:fi:att:file-storage-pas": "pas",
    "pid:urn:storageidentifier1": "legacy-test-storage-1",
}

# Define supported storage services and their FileStorage proxy class
STORAGE_SERVICE_FILE_STORAGES = {
    "test": "BasicFileStorage",
    "ida": "IDAFileStorage",
    "pas": "ProjectFileStorage",
    "legacy-test-storage-1": "ProjectFileStorage",
}


# Profiling
ENABLE_DEBUG_TOOLBAR = env.bool("ENABLE_DEBUG_TOOLBAR", True)
ENABLE_SILK_PROFILER = env.bool("ENABLE_SILK_PROFILER", False)

# Languages

DISPLAY_API_LANGUAGES = ["en", "fi", "sv"]
