# Generated by Django 4.2.11 on 2024-03-19 09:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('refdata', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='usecategory',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='theme',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.theme'),
        ),
        migrations.AddField(
            model_name='theme',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='restrictiongrounds',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.restrictiongrounds'),
        ),
        migrations.AddField(
            model_name='restrictiongrounds',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='resourcetype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.resourcetype'),
        ),
        migrations.AddField(
            model_name='resourcetype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='researchinfra',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.researchinfra'),
        ),
        migrations.AddField(
            model_name='researchinfra',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='relationtype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.relationtype'),
        ),
        migrations.AddField(
            model_name='relationtype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='preservationevent',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.preservationevent'),
        ),
        migrations.AddField(
            model_name='preservationevent',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='location',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.location'),
        ),
        migrations.AddField(
            model_name='location',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lifecycleevent',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.lifecycleevent'),
        ),
        migrations.AddField(
            model_name='lifecycleevent',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='license',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.license'),
        ),
        migrations.AddField(
            model_name='license',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='language',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.language'),
        ),
        migrations.AddField(
            model_name='language',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='identifiertype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.identifiertype'),
        ),
        migrations.AddField(
            model_name='identifiertype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fundertype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.fundertype'),
        ),
        migrations.AddField(
            model_name='fundertype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='filetype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.filetype'),
        ),
        migrations.AddField(
            model_name='filetype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fileformatversion',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.fileformatversion'),
        ),
        migrations.AddField(
            model_name='fileformatversion',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='fieldofscience',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.fieldofscience'),
        ),
        migrations.AddField(
            model_name='fieldofscience',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='eventoutcome',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.eventoutcome'),
        ),
        migrations.AddField(
            model_name='eventoutcome',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contributortype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.contributortype'),
        ),
        migrations.AddField(
            model_name='contributortype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contributorrole',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.contributorrole'),
        ),
        migrations.AddField(
            model_name='contributorrole',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accesstype',
            name='broader',
            field=models.ManyToManyField(blank=True, related_name='narrower', to='refdata.accesstype'),
        ),
        migrations.AddField(
            model_name='accesstype',
            name='system_creator',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)ss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='usecategory',
            index=models.Index(fields=['url'], name='refdata_use_url_51546d_idx'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_usecategory_require_url'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_usecategory_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_usecategory_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='theme',
            index=models.Index(fields=['url'], name='refdata_the_url_02fdee_idx'),
        ),
        migrations.AddConstraint(
            model_name='theme',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_theme_require_url'),
        ),
        migrations.AddConstraint(
            model_name='theme',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_theme_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='theme',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_theme_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='restrictiongrounds',
            index=models.Index(fields=['url'], name='refdata_res_url_2b1384_idx'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_restrictiongrounds_require_url'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_restrictiongrounds_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_restrictiongrounds_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='resourcetype',
            index=models.Index(fields=['url'], name='refdata_res_url_3e28fc_idx'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_resourcetype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_resourcetype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_resourcetype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='researchinfra',
            index=models.Index(fields=['url'], name='refdata_res_url_ed1f71_idx'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_researchinfra_require_url'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_researchinfra_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_researchinfra_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='relationtype',
            index=models.Index(fields=['url'], name='refdata_rel_url_02ea69_idx'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_relationtype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_relationtype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_relationtype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='preservationevent',
            index=models.Index(fields=['url'], name='refdata_pre_url_4f46c0_idx'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_preservationevent_require_url'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_preservationevent_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_preservationevent_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['url'], name='refdata_loc_url_ca7c51_idx'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_location_require_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_location_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_location_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='lifecycleevent',
            index=models.Index(fields=['url'], name='refdata_lif_url_981fe3_idx'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_lifecycleevent_require_url'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_lifecycleevent_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_lifecycleevent_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['url'], name='refdata_lic_url_378f1c_idx'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_license_require_url'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_license_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_license_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['url'], name='refdata_lan_url_8d6b40_idx'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_language_require_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_language_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_language_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='identifiertype',
            index=models.Index(fields=['url'], name='refdata_ide_url_61520d_idx'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_identifiertype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_identifiertype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_identifiertype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='fundertype',
            index=models.Index(fields=['url'], name='refdata_fun_url_1d68d5_idx'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_fundertype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_fundertype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_fundertype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='filetype',
            index=models.Index(fields=['url'], name='refdata_fil_url_a64f58_idx'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_filetype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_filetype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_filetype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='fileformatversion',
            index=models.Index(fields=['url'], name='refdata_fil_url_2865b7_idx'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_fileformatversion_require_url'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_fileformatversion_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_fileformatversion_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='fieldofscience',
            index=models.Index(fields=['url'], name='refdata_fie_url_a5c66a_idx'),
        ),
        migrations.AddConstraint(
            model_name='fieldofscience',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_fieldofscience_require_url'),
        ),
        migrations.AddConstraint(
            model_name='fieldofscience',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_fieldofscience_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='fieldofscience',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_fieldofscience_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='eventoutcome',
            index=models.Index(fields=['url'], name='refdata_eve_url_2394dd_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_eventoutcome_require_url'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_eventoutcome_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_eventoutcome_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='contributortype',
            index=models.Index(fields=['url'], name='refdata_con_url_c3d422_idx'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_contributortype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_contributortype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_contributortype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='contributorrole',
            index=models.Index(fields=['url'], name='refdata_con_url_bf3344_idx'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_contributorrole_require_url'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_contributorrole_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_contributorrole_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='accesstype',
            index=models.Index(fields=['url'], name='refdata_acc_url_a291d1_idx'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_accesstype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.UniqueConstraint(fields=('url',), name='refdata_accesstype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.CheckConstraint(check=models.Q(('in_scheme', ''), _negated=True), name='refdata_accesstype_require_reference_data_scheme'),
        ),
    ]
