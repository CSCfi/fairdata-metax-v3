# Generated by Django 3.2.12 on 2022-06-10 14:38

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('refdata', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('as_wkt', models.TextField(blank=True, default='')),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Location')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Language')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Keyword')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['is_reference_data'], name='refdata_loc_is_refe_f1bb42_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['url'], name='refdata_loc_url_ca7c51_idx'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_location_require_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_location_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_location_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['is_reference_data'], name='refdata_lan_is_refe_cc2341_idx'),
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['url'], name='refdata_lan_url_8d6b40_idx'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_language_require_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_language_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_language_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['is_reference_data'], name='refdata_key_is_refe_cabe24_idx'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['url'], name='refdata_key_url_ed89cd_idx'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_keyword_require_url'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_keyword_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_keyword_require_reference_data_scheme'),
        ),
    ]
