# Generated by Django 3.2.12 on 2022-07-25 08:10

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.utils.timezone
import model_utils.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('refdata', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='UseCategory',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.UseCategory')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RestrictionGrounds',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.RestrictionGrounds')),
            ],
            options={
                'verbose_name': 'restriction grounds',
                'verbose_name_plural': 'restriction grounds',
            },
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.ResourceType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResearchInfra',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.ResearchInfra')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RelationType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.RelationType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PreservationEvent',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.PreservationEvent')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('as_wkt', models.TextField(blank=True, default='')),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Location')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LifecycleEvent',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.LifecycleEvent')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='License',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('license', models.URLField(blank=True, default='', help_text='URL for user-readable license text.', max_length=255)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.License')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Language')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Keyword',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.Keyword')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IdentifierType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.IdentifierType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FunderType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.FunderType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.FileType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileFormatVersion',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('file_format', models.CharField(max_length=255)),
                ('format_version', models.CharField(blank=True, default='', max_length=255)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.FileFormatVersion')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventOutcome',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.EventOutcome')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.ContributorType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContributorRole',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.ContributorRole')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccessType',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(max_length=255)),
                ('in_scheme', models.URLField(blank=True, default='', max_length=255)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('same_as', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_reference_data', models.BooleanField(default=False)),
                ('broader', models.ManyToManyField(blank=True, related_name='narrower', to='refdata.AccessType')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='usecategory',
            index=models.Index(fields=['is_reference_data'], name='refdata_use_is_refe_258c7e_idx'),
        ),
        migrations.AddIndex(
            model_name='usecategory',
            index=models.Index(fields=['url'], name='refdata_use_url_51546d_idx'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_usecategory_require_url'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_usecategory_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='usecategory',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_usecategory_require_reference_data_scheme'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_restrictiongrounds_require_url'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_restrictiongrounds_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='restrictiongrounds',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_restrictiongrounds_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='resourcetype',
            index=models.Index(fields=['is_reference_data'], name='refdata_res_is_refe_b13667_idx'),
        ),
        migrations.AddIndex(
            model_name='resourcetype',
            index=models.Index(fields=['url'], name='refdata_res_url_3e28fc_idx'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_resourcetype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_resourcetype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='resourcetype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_resourcetype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='researchinfra',
            index=models.Index(fields=['is_reference_data'], name='refdata_res_is_refe_220457_idx'),
        ),
        migrations.AddIndex(
            model_name='researchinfra',
            index=models.Index(fields=['url'], name='refdata_res_url_ed1f71_idx'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_researchinfra_require_url'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_researchinfra_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='researchinfra',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_researchinfra_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='relationtype',
            index=models.Index(fields=['is_reference_data'], name='refdata_rel_is_refe_db9147_idx'),
        ),
        migrations.AddIndex(
            model_name='relationtype',
            index=models.Index(fields=['url'], name='refdata_rel_url_02ea69_idx'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_relationtype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_relationtype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='relationtype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_relationtype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='preservationevent',
            index=models.Index(fields=['is_reference_data'], name='refdata_pre_is_refe_b2967c_idx'),
        ),
        migrations.AddIndex(
            model_name='preservationevent',
            index=models.Index(fields=['url'], name='refdata_pre_url_4f46c0_idx'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_preservationevent_require_url'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_preservationevent_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='preservationevent',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_preservationevent_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['is_reference_data'], name='refdata_loc_is_refe_f1bb42_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['url'], name='refdata_loc_url_ca7c51_idx'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_location_require_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_location_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='location',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_location_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='lifecycleevent',
            index=models.Index(fields=['is_reference_data'], name='refdata_lif_is_refe_43273d_idx'),
        ),
        migrations.AddIndex(
            model_name='lifecycleevent',
            index=models.Index(fields=['url'], name='refdata_lif_url_981fe3_idx'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_lifecycleevent_require_url'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_lifecycleevent_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='lifecycleevent',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_lifecycleevent_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['is_reference_data'], name='refdata_lic_is_refe_3a418d_idx'),
        ),
        migrations.AddIndex(
            model_name='license',
            index=models.Index(fields=['url'], name='refdata_lic_url_378f1c_idx'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_license_require_url'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_license_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='license',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_license_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['is_reference_data'], name='refdata_lan_is_refe_cc2341_idx'),
        ),
        migrations.AddIndex(
            model_name='language',
            index=models.Index(fields=['url'], name='refdata_lan_url_8d6b40_idx'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_language_require_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_language_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='language',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_language_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['is_reference_data'], name='refdata_key_is_refe_cabe24_idx'),
        ),
        migrations.AddIndex(
            model_name='keyword',
            index=models.Index(fields=['url'], name='refdata_key_url_ed89cd_idx'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_keyword_require_url'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_keyword_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='keyword',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_keyword_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='identifiertype',
            index=models.Index(fields=['is_reference_data'], name='refdata_ide_is_refe_9811c0_idx'),
        ),
        migrations.AddIndex(
            model_name='identifiertype',
            index=models.Index(fields=['url'], name='refdata_ide_url_61520d_idx'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_identifiertype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_identifiertype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='identifiertype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_identifiertype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='fundertype',
            index=models.Index(fields=['is_reference_data'], name='refdata_fun_is_refe_05b7ff_idx'),
        ),
        migrations.AddIndex(
            model_name='fundertype',
            index=models.Index(fields=['url'], name='refdata_fun_url_1d68d5_idx'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_fundertype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_fundertype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='fundertype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_fundertype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='filetype',
            index=models.Index(fields=['is_reference_data'], name='refdata_fil_is_refe_d9c48d_idx'),
        ),
        migrations.AddIndex(
            model_name='filetype',
            index=models.Index(fields=['url'], name='refdata_fil_url_a64f58_idx'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_filetype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_filetype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='filetype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_filetype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='fileformatversion',
            index=models.Index(fields=['is_reference_data'], name='refdata_fil_is_refe_f619b5_idx'),
        ),
        migrations.AddIndex(
            model_name='fileformatversion',
            index=models.Index(fields=['url'], name='refdata_fil_url_2865b7_idx'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_fileformatversion_require_url'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_fileformatversion_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='fileformatversion',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_fileformatversion_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='eventoutcome',
            index=models.Index(fields=['is_reference_data'], name='refdata_eve_is_refe_7b8daf_idx'),
        ),
        migrations.AddIndex(
            model_name='eventoutcome',
            index=models.Index(fields=['url'], name='refdata_eve_url_2394dd_idx'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_eventoutcome_require_url'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_eventoutcome_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='eventoutcome',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_eventoutcome_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='contributortype',
            index=models.Index(fields=['is_reference_data'], name='refdata_con_is_refe_0ee707_idx'),
        ),
        migrations.AddIndex(
            model_name='contributortype',
            index=models.Index(fields=['url'], name='refdata_con_url_c3d422_idx'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_contributortype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_contributortype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='contributortype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_contributortype_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='contributorrole',
            index=models.Index(fields=['is_reference_data'], name='refdata_con_is_refe_122cb0_idx'),
        ),
        migrations.AddIndex(
            model_name='contributorrole',
            index=models.Index(fields=['url'], name='refdata_con_url_bf3344_idx'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_contributorrole_require_url'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_contributorrole_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='contributorrole',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_contributorrole_require_reference_data_scheme'),
        ),
        migrations.AddIndex(
            model_name='accesstype',
            index=models.Index(fields=['is_reference_data'], name='refdata_acc_is_refe_315c3a_idx'),
        ),
        migrations.AddIndex(
            model_name='accesstype',
            index=models.Index(fields=['url'], name='refdata_acc_url_a291d1_idx'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.CheckConstraint(check=models.Q(('url', ''), _negated=True), name='refdata_accesstype_require_url'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_reference_data', True)), fields=('url',), name='refdata_accesstype_unique_reference_data_url'),
        ),
        migrations.AddConstraint(
            model_name='accesstype',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('in_scheme', ''), _negated=True), ('is_reference_data', False), _connector='OR'), name='refdata_accesstype_require_reference_data_scheme'),
        ),
    ]
