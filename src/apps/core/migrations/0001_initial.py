# Generated by Django 4.2.11 on 2024-03-19 09:32

import apps.common.models
import apps.core.mixins
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('actors', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('available', models.DateField(blank=True, help_text='Date (UTC) that the resource became or will become available.', null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
            ],
            options={
                'verbose_name_plural': 'Access rights',
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.CharField(help_text='A unique id of the resource being described or cataloged.', max_length=255, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('logo', models.CharField(blank=True, max_length=100, null=True)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('deprecated', models.DateTimeField(null=True)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
                ('last_cumulative_addition', models.DateTimeField(blank=True, null=True)),
                ('pid_type', models.CharField(blank=True, choices=[('URN', 'URN'), ('DOI', 'DOI')], max_length=4, null=True)),
                ('state', models.CharField(choices=[('published', 'Published'), ('draft', 'Draft')], default='draft', max_length=10)),
                ('version', models.IntegerField(blank=True, default=1, editable=False)),
                ('cumulative_state', models.IntegerField(choices=[(0, 'Not cumulative'), (1, 'Active'), (2, 'Closed')], default=0, help_text='Cumulative state')),
                ('published_revision', models.IntegerField(blank=True, default=0, editable=False)),
                ('draft_revision', models.IntegerField(blank=True, default=0, editable=False)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(apps.core.mixins.V2DatasetMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DatasetActor',
            fields=[
                ('actor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='actors.actor')),
                ('roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('creator', 'Creator'), ('contributor', 'Contributor'), ('publisher', 'Publisher'), ('curator', 'Curator'), ('rights_holder', 'Rights holder')], default='creator', max_length=30), blank=True, default=list, size=None)),
                ('actors_order', models.IntegerField(default=0, help_text='Position in dataset actors list.')),
            ],
            options={
                'ordering': ['actors_order', 'created'],
            },
            bases=('actors.actor',),
        ),
        migrations.CreateModel(
            name='DatasetLicense',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('custom_url', models.URLField(blank=True, max_length=512, null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='DatasetProject',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('project_identifier', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetVersions',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('entity_identifier', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'verbose_name_plural': 'Entities',
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntityRelation',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileSet',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileSetDirectoryMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pathname', models.TextField(db_index=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FileSetFileMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Funder',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Funding',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('funding_identifier', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('available', models.DateField(blank=True, help_text='Date (UTC) that the resource became or will become available.', null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical access rights',
                'verbose_name_plural': 'historical Access rights',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights_license',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalAccessRights_license',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical catalog home page',
                'verbose_name_plural': 'historical catalog home pages',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical contract',
                'verbose_name_plural': 'historical contracts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.CharField(db_index=True, help_text='A unique id of the resource being described or cataloged.', max_length=255)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('logo', models.CharField(blank=True, max_length=100, null=True)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical data catalog',
                'verbose_name_plural': 'historical data catalogs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataCatalog_language',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset',
            fields=[
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('deprecated', models.DateTimeField(null=True)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
                ('last_cumulative_addition', models.DateTimeField(blank=True, null=True)),
                ('pid_type', models.CharField(blank=True, choices=[('URN', 'URN'), ('DOI', 'DOI')], max_length=4, null=True)),
                ('state', models.CharField(choices=[('published', 'Published'), ('draft', 'Draft')], default='draft', max_length=10)),
                ('version', models.IntegerField(blank=True, default=1, editable=False)),
                ('cumulative_state', models.IntegerField(choices=[(0, 'Not cumulative'), (1, 'Active'), (2, 'Closed')], default=0, help_text='Cumulative state')),
                ('published_revision', models.IntegerField(blank=True, default=0, editable=False)),
                ('draft_revision', models.IntegerField(blank=True, default=0, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical dataset',
                'verbose_name_plural': 'historical datasets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_field_of_science',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataset_field_of_science',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_infrastructure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataset_infrastructure',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataset_language',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_other_identifiers',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataset_other_identifiers',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_theme',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDataset_theme',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical dataset publisher',
                'verbose_name_plural': 'historical dataset publishers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher_homepage',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'HistoricalDatasetPublisher_homepage',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='MetadataProvider',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('organization', models.CharField(max_length=512)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtherIdentifier',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notation', models.CharField(max_length=512)),
                ('old_notation', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Preservation',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=256, primary_key=True, serialize=False)),
                ('state', models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Generating Technical Metadata'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Rejected By User'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in DPRES.')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='Description for the preservation state. This can be an error message or a human readable summary of the last preservation action.\n\nExample: {"en": "Packaging failed", "fi": "Paketointi epäonnistui"}', null=True)),
                ('reason_description', models.TextField(blank=True, default='', help_text='User-provided reason for rejecting or accepting a dataset in DPRES')),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Provenance',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi": "kuvaus"}', null=True)),
                ('outcome_description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"successfully collected",}', null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProvenanceVariable',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"Age"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"This variable indicates the person\'s age in years"}', null=True)),
                ('representation', models.URLField(blank=True, help_text='Scheme that contains the possible values of the variable.', null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemoteResource',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('access_url', models.URLField(blank=True, max_length=2048, null=True)),
                ('download_url', models.URLField(blank=True, max_length=2048, null=True)),
                ('checksum', models.TextField(blank=True, null=True)),
                ('mediatype', models.TextField(blank=True, help_text='IANA media type as a string, e.g. "text/csv".', null=True, validators=[apps.common.models.MediaTypeValidator()])),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Spatial',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_address', models.CharField(blank=True, max_length=512, null=True)),
                ('geographic_name', models.CharField(blank=True, max_length=512, null=True)),
                ('altitude_in_meters', models.IntegerField(blank=True, help_text='The altitude of the geographical area (meters from WGS84 reference)', null=True)),
                ('custom_wkt', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, help_text='Additional wkt values according to WGS84', null=True, size=None)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Temporal',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariableConcept',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='The preferred label of the concept.', null=True)),
                ('definition', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='Definition or formal explanation of the concept.', null=True)),
                ('concept_identifier', models.URLField(help_text='An URL identifying the concept.', max_length=512)),
                ('in_scheme', models.URLField(blank=True, help_text='The scheme the concept belongs to.', max_length=255, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VariableUniverse',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='The preferred label of the concept.', null=True)),
                ('definition', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='Definition or formal explanation of the concept.', null=True)),
                ('concept_identifier', models.URLField(help_text='An URL identifying the concept.', max_length=512)),
                ('in_scheme', models.URLField(blank=True, help_text='The scheme the concept belongs to.', max_length=255, null=True)),
            ],
            options={
                'ordering': ['created', 'id'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
