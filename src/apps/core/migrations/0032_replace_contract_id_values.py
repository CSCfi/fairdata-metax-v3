# Generated by Django 4.2.16 on 2024-12-02 12:31

import uuid
from django.db import migrations
from django.db.models import Subquery, OuterRef, F, Case, When, Value


def update_contract_ids(apps, schema_editor):
    """Replace Contract ids with contract_identifier values."""
    contract_model = apps.get_model("core.Contract")
    contracts_ids = contract_model.objects.values_list("id", "contract_identifier")

    # Replace each existing id with value from corresponding contract_identifier
    id_case = Case(
        *(When(id=old_id, then=Value(new_id)) for old_id, new_id in contracts_ids)
    )
    contract_model.objects.update(id=id_case)
    apps.get_model("core.HistoricalContract").objects.update(id=id_case)

    # Update relations pointing to contracts
    contract_id_case = Case(
        *(When(contract_id=old_id, then=Value(new_id)) for old_id, new_id in contracts_ids)
    )
    apps.get_model("core.ContractContact").objects.update(
        contract_id=contract_id_case
    )
    apps.get_model("core.ContractService").objects.update(
        contract_id=contract_id_case
    )
    apps.get_model("core.Preservation").objects.update(
        contract_id=contract_id_case
    )


def revert_update_contract_ids(apps, schema_editor):
    """Replace Contract ids (text) with uuid values."""
    contract_model = apps.get_model("core.Contract")
    contracts = contract_model.objects.all()

    # Move text id to contract_identifier
    contracts.update(contract_identifier=F("id"))
    apps.get_model("core.HistoricalContract").objects.update(contract_identifier=F("id"))

    # The previously removed uuids are not stored anywhere so we create new ones
    id_map = {contract.id: uuid.uuid4() for contract in contracts}
    id_case = Case(
        *(When(id=old_id, then=Value(new_id)) for old_id, new_id in id_map.items())
    )
    contract_model.objects.update(id=id_case)

    # Remove historical contracts that don't correspond to
    # an existing one and then update ids
    apps.get_model("core.HistoricalContract").objects.exclude(id__in=id_map).delete()
    apps.get_model("core.HistoricalContract").objects.update(id=id_case)

    # Update relations pointing to contracts
    contract_id_case = Case(
        *(When(contract_id=old_id, then=Value(new_id)) for old_id, new_id in id_map.items())
    )
    apps.get_model("core.ContractContact").objects.update(
        contract_id=contract_id_case
    )
    apps.get_model("core.ContractService").objects.update(
        contract_id=contract_id_case
    )
    apps.get_model("core.Preservation").objects.update(
        contract_id=contract_id_case
    )

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0031_contract_id_to_charfield'),
    ]

    operations = [
        migrations.RunPython(update_contract_ids, revert_update_contract_ids),
    ]
