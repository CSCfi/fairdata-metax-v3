# Generated by Django 3.2.21 on 2023-10-19 15:13

import apps.common.models
import apps.core.mixins
import apps.core.models.concepts
from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.operations
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_initial'), ('core', '0004_datasetdirectorymetadata_datasetfilemetadata'), ('core', '0005_auto_20230526_1351'), ('core', '0007_fileset'), ('core', '0009_remove_dataset_files'), ('core', '0010_auto_20230526_1742'), ('core', '0011_auto_20230630_1035'), ('core', '0012_auto_20230630_1643'), ('core', '0013_alter_provenance_title'), ('core', '0014_license_location'), ('core', '0015_auto_20230816_1644'), ('core', '0016_legacydataset_v2_dataset_compatibility_diff'), ('core', '0017_auto_20230822_1632'), ('core', '0018_auto_20230824_1855'), ('core', '0019_auto_20230919_1229'), ('core', '0020_auto_20230919_1527'), ('core', '0021_alter_dataset_previous'), ('core', '0020_remoteresource'), ('core', '0022_merge_0020_remoteresource_0021_alter_dataset_previous'), ('core', '0023_auto_20231011_1401'), ('core', '0024_alter_dataset_access_rights'), ('core', '0025_auto_20231019_1639'), ('core', '0026_auto_20231019_1712')]

    initial = True

    dependencies = [
        ('actors', '0001_initial'),
        ('actors', '0003_auto_20230807_1334'),
        ('refdata', '0008_merge_0005_auto_20230315_1529_0007_auto_20230328_1250'),
        ('actors', '0002_alter_actor_person'),
        ('refdata', '0009_alter_location_as_wkt'),
        ('files', '0006_auto_20230310_1335'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('files', '0011_auto_20230421_1011'),
    ]

    operations = [
        django.contrib.postgres.operations.HStoreExtension(
        ),
        migrations.CreateModel(
            name='AccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
            ],
            options={
                'verbose_name_plural': 'Access rights',
            },
        ),
        migrations.CreateModel(
            name='CatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_cataloghomepages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogRecord',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('preservation_identifier', models.CharField(blank=True, max_length=512, null=True)),
                ('preservation_state', models.IntegerField(choices=[(0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=0, help_text='Record state in PAS.')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_contracts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(help_text='A unique id of the resource being described or cataloged.', max_length=255, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
                ('access_rights', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catalogs', to='core.accessrights')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetLicense',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('custom_url', models.URLField(blank=True, max_length=512, null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='refdata.license')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datasetlicenses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
                ('homepage', models.ManyToManyField(related_name='publishers', to='core.CatalogHomePage')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datasetpublishers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical access rights',
                'verbose_name_plural': 'historical Access rights',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(db_index=True, help_text='A unique id of the resource being described or cataloged.', max_length=255)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('access_rights', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('publisher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datasetpublisher')),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical data catalog',
                'verbose_name_plural': 'historical data catalogs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical dataset publisher',
                'verbose_name_plural': 'historical dataset publishers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Provenance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"description", "fi": "kuvaus"}')),
                ('outcome_description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"successfully collected",}', null=True)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccessType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.accesstype'),
        ),
        migrations.CreateModel(
            name='EventOutcome',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.eventoutcome'),
        ),
        migrations.CreateModel(
            name='FieldOfScience',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.fieldofscience'),
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.filetype'),
        ),
        migrations.CreateModel(
            name='IdentifierType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.identifiertype'),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.language'),
        ),
        migrations.CreateModel(
            name='LifecycleEvent',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.lifecycleevent'),
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.theme'),
        ),
        migrations.CreateModel(
            name='UseCategory',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.usecategory'),
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('catalogrecord_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.catalogrecord')),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, max_length=255, null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
                ('last_cumulative_addition', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(choices=[('published', 'Published'), ('draft', 'Draft')], default='draft', max_length=10)),
                ('cumulative_state', models.IntegerField(choices=[(0, 'Not cumulative'), (1, 'Active'), (2, 'Closed')], default=0, help_text='Cumulative state')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=(apps.core.mixins.V2DatasetMixin, 'core.catalogrecord', models.Model),
        ),
        migrations.CreateModel(
            name='Spatial',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(blank=True, help_text='valid url to the property definition', max_length=512, null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('representation', models.URLField(blank=True, null=True)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('in_scheme', models.URLField(blank=True, max_length=255, null=True)),
                ('full_address', models.CharField(blank=True, max_length=512, null=True)),
                ('geographic_name', models.CharField(blank=True, max_length=512, null=True)),
                ('altitude_in_meters', models.IntegerField(blank=True, help_text='The altitude of the geographical area (meters from WGS84 reference)', null=True)),
                ('reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='refdata.location')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_spatials', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='spatial', to='core.dataset')),
            ],
        ),
        migrations.CreateModel(
            name='ProvenanceVariable',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(blank=True, help_text='valid url to the property definition', max_length=512, null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('representation', models.URLField(blank=True, null=True)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('in_scheme', models.URLField(blank=True, max_length=255, null=True)),
                ('provenance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.provenance')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_provenancevariables', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='provenance',
            name='event_outcome',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.eventoutcome'),
        ),
        migrations.AddField(
            model_name='provenance',
            name='lifecycle_event',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.lifecycleevent'),
        ),
        migrations.AddField(
            model_name='provenance',
            name='spatial',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='provenance', to='core.spatial'),
        ),
        migrations.AddField(
            model_name='provenance',
            name='system_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_provenances', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MetadataProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('organization', models.CharField(max_length=512)),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_metadataproviders', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher_homepage',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('cataloghomepage', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.cataloghomepage')),
                ('datasetpublisher', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datasetpublisher')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldatasetpublisher')),
            ],
            options={
                'verbose_name': 'HistoricalDatasetPublisher_homepage',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset',
            fields=[
                ('catalogrecord_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='core.catalogrecord')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('preservation_identifier', models.CharField(blank=True, max_length=512, null=True)),
                ('preservation_state', models.IntegerField(choices=[(0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=0, help_text='Record state in PAS.')),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, max_length=255, null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
                ('last_cumulative_addition', models.DateTimeField(blank=True, null=True)),
                ('state', models.CharField(choices=[('published', 'Published'), ('draft', 'Draft')], default='draft', max_length=10)),
                ('cumulative_state', models.IntegerField(choices=[(0, 'Not cumulative'), (1, 'Active'), (2, 'Closed')], default=0, help_text='Cumulative state')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('access_rights', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('contract', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.contract')),
                ('data_catalog', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metadata_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.metadataprovider')),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('first', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
                ('last', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
                ('previous', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
                ('replaces', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'historical dataset',
                'verbose_name_plural': 'historical datasets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('datacatalog', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldatacatalog')),
                ('language', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.language')),
            ],
            options={
                'verbose_name': 'HistoricalDataCatalog_language',
            },
        ),
        migrations.CreateModel(
            name='HistoricalContract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical contract',
                'verbose_name_plural': 'historical contracts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCatalogRecord',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('preservation_identifier', models.CharField(blank=True, max_length=512, null=True)),
                ('preservation_state', models.IntegerField(choices=[(0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=0, help_text='Record state in PAS.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('contract', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.contract')),
                ('data_catalog', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_modified_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('metadata_owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.metadataprovider')),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical catalog record',
                'verbose_name_plural': 'historical catalog records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical catalog home page',
                'verbose_name_plural': 'historical catalog home pages',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights_license',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('accessrights', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('datasetlicense', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datasetlicense')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicalaccessrights')),
            ],
            options={
                'verbose_name': 'HistoricalAccessRights_license',
            },
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='access_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accesstype'),
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='system_creator',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='language',
            field=models.ManyToManyField(related_name='catalogs', to='core.Language'),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='publisher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catalogs', to='core.datasetpublisher'),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='system_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datacatalogs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='contract',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='core.contract'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='data_catalog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='records', to='core.datacatalog'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='last_modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='metadata_owner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metadata_owner', to='core.metadataprovider'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='system_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_catalogrecords', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AccessRightsRestrictionGrounds',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(blank=True, help_text='valid url to the property definition', max_length=512, null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"title", "fi":"otsikko"}', null=True)),
                ('representation', models.URLField(blank=True, null=True)),
                ('pref_label', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('in_scheme', models.URLField(blank=True, max_length=255, null=True)),
                ('access_rights', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='restriction_grounds', to='core.accessrights')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_accessrightsrestrictiongroundss', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='accessrights',
            name='access_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='access_rights', to='core.accesstype'),
        ),
        migrations.AddField(
            model_name='accessrights',
            name='license',
            field=models.ManyToManyField(related_name='access_rights', to='core.DatasetLicense'),
        ),
        migrations.AddField(
            model_name='accessrights',
            name='system_creator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_accessrightss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='LegacyDataset',
            fields=[
                ('dataset_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.dataset')),
                ('dataset_json', models.JSONField()),
                ('contract_json', models.JSONField(blank=True, null=True)),
                ('files_json', models.JSONField(blank=True, null=True)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('core.dataset',),
        ),
        migrations.CreateModel(
            name='Temporal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('provenance', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temporal', to='core.provenance')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_temporals', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='temporal', to='core.dataset')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='provenance',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provenance', to='core.dataset'),
        ),
        migrations.CreateModel(
            name='OtherIdentifier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('notation', models.CharField(max_length=512)),
                ('identifier_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_identifiers', to='core.identifiertype')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_otheridentifiers', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='other_identifiers', to='core.dataset')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset_theme',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('theme', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.theme')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_theme',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('language', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.language')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_language',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset_field_of_science',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('fieldofscience', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.fieldofscience')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_field_of_science',
            },
        ),
        migrations.CreateModel(
            name='DatasetProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('project_identifier', models.CharField(blank=True, max_length=512, null=True)),
                ('funder_identifier', models.CharField(blank=True, max_length=512, null=True)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(blank=True, null=True)),
                ('funder_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='refdata.fundertype')),
                ('funding_agency', models.ManyToManyField(related_name='is_funding', to='actors.Organization')),
                ('participating_organization', models.ManyToManyField(related_name='participating_in', to='actors.Organization')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datasetprojects', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ManyToManyField(related_name='is_output_of', to='core.Dataset')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='datasetlicense',
            index=models.Index(fields=['custom_url'], name='core_datase_custom__ae10d6_idx'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='access_rights',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dataset', to='core.accessrights'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='field_of_science',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_essential_choice': True}, related_name='datasets', to='core.FieldOfScience'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='language',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_essential_choice': True}, related_name='datasets', to='core.Language'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='theme',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_essential_choice': True}, related_name='datasets', to='core.Theme'),
        ),
        migrations.AddField(
            model_name='spatial',
            name='custom_wkt',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, help_text='Additional wkt values according to WGS84', null=True, size=None),
        ),
        migrations.AlterField(
            model_name='provenance',
            name='spatial',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='provenance', to='core.spatial'),
        ),
        migrations.CreateModel(
            name='FileSet',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dataset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='file_set', to='core.dataset')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_sets', to='files.filestorage')),
                ('files', models.ManyToManyField(related_name='file_sets', to='files.File')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_filesets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileSetFileMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dataset_metadata', to='files.file')),
                ('file_set', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='file_metadata', to='core.fileset')),
                ('file_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.filetype')),
                ('use_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.usecategory')),
            ],
            options={
                'unique_together': {('file_set', 'file')},
            },
        ),
        migrations.RemoveField(
            model_name='otheridentifier',
            name='dataset',
        ),
        migrations.AlterField(
            model_name='otheridentifier',
            name='identifier_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dataset_identifiers', to='core.identifiertype'),
        ),
        migrations.AddField(
            model_name='otheridentifier',
            name='old_notation',
            field=models.CharField(blank=True, max_length=512, null=True),
        ),
        migrations.AddField(
            model_name='dataset',
            name='other_identifiers',
            field=models.ManyToManyField(blank=True, to='core.OtherIdentifier'),
        ),
        migrations.CreateModel(
            name='ContributorType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.contributortype'),
        ),
        migrations.RemoveField(
            model_name='datasetproject',
            name='funding_agency',
        ),
        migrations.RemoveField(
            model_name='datasetproject',
            name='participating_organization',
        ),
        migrations.CreateModel(
            name='ProjectContributor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='actor_project', to='actors.actor')),
                ('contribution_type', models.ManyToManyField(related_name='projects', to='refdata.ContributorType')),
                ('participating_organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributions', to='actors.organization')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contributors', to='core.datasetproject')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_projectcontributors', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='datasetproject',
            name='funding_agency',
            field=models.ManyToManyField(related_name='is_funding', to='core.ProjectContributor'),
        ),
        migrations.AddField(
            model_name='datasetproject',
            name='participating_organization',
            field=models.ManyToManyField(related_name='is_participating', to='core.ProjectContributor'),
        ),
        migrations.AlterField(
            model_name='temporal',
            name='end_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='temporal',
            name='start_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='provenance',
            name='title',
            field=django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}', null=True),
        ),
        migrations.CreateModel(
            name='License',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.license'),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.location'),
        ),
        migrations.AlterField(
            model_name='legacydataset',
            name='contract_json',
            field=models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True),
        ),
        migrations.AlterField(
            model_name='legacydataset',
            name='dataset_json',
            field=models.JSONField(encoder=django.core.serializers.json.DjangoJSONEncoder),
        ),
        migrations.AlterField(
            model_name='legacydataset',
            name='files_json',
            field=models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True),
        ),
        migrations.AddField(
            model_name='legacydataset',
            name='v2_dataset_compatibility_diff',
            field=models.JSONField(blank=True, encoder=django.core.serializers.json.DjangoJSONEncoder, help_text='Difference between v1-v2 and V3 dataset json', null=True),
        ),
        migrations.AlterField(
            model_name='catalogrecord',
            name='contract',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='core.contract'),
        ),
        migrations.AlterField(
            model_name='catalogrecord',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.AlterField(
            model_name='historicalcatalogrecord',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.AlterField(
            model_name='historicaldataset',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Proposed'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Valid Metadata'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.CreateModel(
            name='FileSetDirectoryMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pathname', models.TextField(db_index=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('file_set', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='directory_metadata', to='core.fileset')),
                ('storage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='files.filestorage')),
                ('use_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.usecategory')),
            ],
            options={
                'unique_together': {('file_set', 'pathname')},
            },
        ),
        migrations.CreateModel(
            name='ResearchInfra',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.researchinfra'),
        ),
        migrations.AlterField(
            model_name='catalogrecord',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Generating Technical Metadata'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Rejected By User'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.AlterField(
            model_name='historicalcatalogrecord',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Generating Technical Metadata'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Rejected By User'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.AlterField(
            model_name='historicaldataset',
            name='preservation_state',
            field=models.IntegerField(choices=[(-1, 'None'), (0, 'Initialized'), (10, 'Generating Technical Metadata'), (20, 'Technical Metadata Generated'), (30, 'Technical Metadata Generated Failed'), (40, 'Invalid Metadata'), (50, 'Metadata Validation Failed'), (60, 'Validated Metadata Updated'), (65, 'Validating Metadata'), (70, 'Rejected By User'), (75, 'Metadata Confirmed'), (80, 'Accepted To Pas'), (90, 'In Packaging Service'), (100, 'Packaging Failed'), (110, 'Sip In Ingestion'), (120, 'In Pas'), (130, 'Rejected From Pas'), (140, 'In Dissemination')], default=-1, help_text='Record state in PAS.'),
        ),
        migrations.CreateModel(
            name='DatasetActor',
            fields=[
                ('actor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='actors.actor')),
                ('roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('creator', 'Creator'), ('contributor', 'Contributor'), ('publisher', 'Publisher'), ('curator', 'Curator'), ('rights_holder', 'Rights holder'), ('provenance', 'Provenance')], default='creator', max_length=30), null=True, size=None)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actors', to='core.dataset')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('actors.actor',),
        ),
        migrations.AddField(
            model_name='dataset',
            name='infrastructure',
            field=models.ManyToManyField(blank=True, related_name='datasets', to='core.ResearchInfra'),
        ),
        migrations.AddField(
            model_name='provenance',
            name='is_associated_with',
            field=models.ManyToManyField(related_name='provenance', to='core.DatasetActor'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='published_revision',
            field=models.IntegerField(blank=True, default=0, editable=False),
        ),
        migrations.AlterModelOptions(
            name='datasetlicense',
            options={'ordering': ['created']},
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='published_revision',
            field=models.IntegerField(blank=True, default=0, editable=False),
        ),
        migrations.RemoveField(
            model_name='historicaldataset',
            name='first',
        ),
        migrations.RemoveField(
            model_name='historicaldataset',
            name='last',
        ),
        migrations.RemoveField(
            model_name='historicaldataset',
            name='previous',
        ),
        migrations.RemoveField(
            model_name='historicaldataset',
            name='replaces',
        ),
        migrations.AddField(
            model_name='dataset',
            name='draft_revision',
            field=models.IntegerField(blank=True, default=0, editable=False),
        ),
        migrations.AddField(
            model_name='dataset',
            name='other_versions',
            field=models.ManyToManyField(db_index=True, related_name='_core_dataset_other_versions_+', to='core.Dataset'),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='draft_revision',
            field=models.IntegerField(blank=True, default=0, editable=False),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_other_identifiers',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('otheridentifier', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.otheridentifier')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_other_identifiers',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_infrastructure',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('researchinfra', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.researchinfra')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_infrastructure',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.RenameField(
            model_name='accessrights',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='accessrightsrestrictiongrounds',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='cataloghomepage',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='catalogrecord',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='contract',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='datacatalog',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='datasetlicense',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='datasetproject',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='datasetpublisher',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicalaccessrights',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicalcataloghomepage',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicalcatalogrecord',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicalcontract',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicaldatacatalog',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicaldataset',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='historicaldatasetpublisher',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='metadataprovider',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='otheridentifier',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='provenance',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='provenancevariable',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='spatial',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RenameField(
            model_name='temporal',
            old_name='removal_date',
            new_name='removed',
        ),
        migrations.RemoveField(
            model_name='accessrights',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='accessrightsrestrictiongrounds',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='cataloghomepage',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='catalogrecord',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='contract',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='datacatalog',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='datasetlicense',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='datasetproject',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='datasetpublisher',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicalaccessrights',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicalcataloghomepage',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicalcatalogrecord',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicalcontract',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicaldatacatalog',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicaldataset',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='historicaldatasetpublisher',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='metadataprovider',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='otheridentifier',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='provenance',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='provenancevariable',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='spatial',
            name='is_removed',
        ),
        migrations.RemoveField(
            model_name='temporal',
            name='is_removed',
        ),
        migrations.AlterField(
            model_name='accessrights',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='accessrightsrestrictiongrounds',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='cataloghomepage',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='catalogrecord',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='contract',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='datacatalog',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='datasetlicense',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='datasetproject',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='datasetpublisher',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicalaccessrights',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicalcataloghomepage',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicalcatalogrecord',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicalcontract',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicaldatacatalog',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicaldataset',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='historicaldatasetpublisher',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='metadataprovider',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='otheridentifier',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='provenance',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='provenancevariable',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.CreateModel(
            name='RemoteResource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('removed', models.DateTimeField(blank=True, editable=False, null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('access_url', models.URLField(blank=True, max_length=2048, null=True)),
                ('download_url', models.URLField(blank=True, max_length=2048, null=True)),
                ('checksum', models.TextField(blank=True, null=True)),
                ('mediatype', models.TextField(blank=True, help_text='IANA media type as a string, e.g. "text/csv".', null=True, validators=[apps.common.models.MediaTypeValidator()])),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='remote_resources', to='core.dataset')),
                ('file_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.filetype')),
                ('system_creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_remoteresources', to=settings.AUTH_USER_MODEL)),
                ('use_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.usecategory')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AlterField(
            model_name='spatial',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
        migrations.AlterField(
            model_name='temporal',
            name='removed',
            field=models.DateTimeField(blank=True, editable=False, null=True),
        ),
    ]
