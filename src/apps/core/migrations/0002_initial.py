# Generated by Django 3.2.16 on 2022-12-27 09:49

import uuid

import django.contrib.postgres.fields
import django.contrib.postgres.fields.hstore
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import apps.common.helpers
import apps.core.models.concepts


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('refdata', '0002_auto_20221219_0909'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
            ],
            options={
                'verbose_name_plural': 'Access rights',
            },
        ),
        migrations.CreateModel(
            name='CatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('system_creator', models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_cataloghomepages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogRecord',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
                ('system_creator', models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_contracts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(help_text='A unique id of the resource being described or cataloged.', max_length=255, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
                ('access_rights', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catalogs', to='core.accessrights')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
                ('homepage', models.ManyToManyField(related_name='publishers', to='core.CatalogHomePage')),
                ('system_creator', models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datasetpublishers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataStorage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(help_text='A unique id of the data storage', max_length=255, primary_key=True, serialize=False)),
                ('endpoint_url', models.URLField(help_text='The root location or primary endpoint of the service (a Web-resolvable IRI).')),
                ('endpoint_description', models.TextField(help_text='A description of the services available via the end-points, including their operations, parameters etc.')),
                ('system_creator', models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datastorages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(help_text='A specific representation of a dataset.', max_length=255, primary_key=True, serialize=False)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('access_url', models.URLField()),
                ('download_url', models.URLField()),
                ('byte_size', models.BigIntegerField(default=0)),
                ('checksum', models.TextField()),
                ('access_rights', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='distributions', to='core.accessrights')),
                ('access_service', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='distributions', to='core.datastorage')),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('byte_size', models.BigIntegerField(default=0)),
                ('checksum', models.TextField()),
                ('date_frozen', models.DateTimeField(blank=True, null=True)),
                ('file_format', models.CharField(max_length=200, null=True)),
                ('file_name', models.TextField()),
                ('file_path', models.TextField()),
                ('date_uploaded', models.DateTimeField()),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('project_identifier', models.CharField(blank=True, max_length=200, null=True)),
                ('system_creator', models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, help_text='example: {"en":"description", "fi":"kuvaus"}', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical access rights',
                'verbose_name_plural': 'historical Access rights',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(db_index=True, help_text='A unique id of the resource being described or cataloged.', max_length=255)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('dataset_versioning_enabled', models.BooleanField(default=False)),
                ('harvested', models.BooleanField(default=False)),
                ('dataset_schema', models.CharField(choices=[('ida', 'IDA Schema'), ('att', 'ATT Schema'), ('drf', 'DRF Schema')], default='ida', max_length=6)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('access_rights', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('publisher', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datasetpublisher')),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical data catalog',
                'verbose_name_plural': 'historical data catalogs',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDataset',
            fields=[
                ('catalogrecord_ptr', models.ForeignKey(auto_created=True, blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, parent_link=True, related_name='+', to='core.catalogrecord')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, max_length=255, null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('other_identifiers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('access_rights', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('contract', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.contract')),
                ('data_catalog', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical dataset',
                'verbose_name_plural': 'historical datasets',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en": "name", "fi":"nimi"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical dataset publisher',
                'verbose_name_plural': 'historical dataset publishers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDistribution',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(db_index=True, help_text='A specific representation of a dataset.', max_length=255)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('access_url', models.URLField()),
                ('download_url', models.URLField()),
                ('byte_size', models.BigIntegerField(default=0)),
                ('checksum', models.TextField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('access_rights', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('access_service', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datastorage')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical distribution',
                'verbose_name_plural': 'historical distributions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='AccessType',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.accesstype'),
        ),
        migrations.CreateModel(
            name='FieldOfScience',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.fieldofscience'),
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.language'),
        ),
        migrations.CreateModel(
            name='License',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.license'),
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=(apps.core.models.concepts.ConceptProxyMixin, 'refdata.theme'),
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('catalogrecord_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='core.catalogrecord')),
                ('persistent_identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('issued', models.DateTimeField(blank=True, help_text='Date of formal issuance (e.g., publication) of the resource.', null=True)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', django.contrib.postgres.fields.hstore.HStoreField(blank=True, max_length=255, null=True)),
                ('keyword', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('other_identifiers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_deprecated', models.BooleanField(default=False)),
                ('cumulation_started', models.DateTimeField(blank=True, null=True)),
                ('cumulation_ended', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['created'],
                'get_latest_by': 'modified',
                'abstract': False,
            },
            bases=('core.catalogrecord', models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalFile',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('byte_size', models.BigIntegerField(default=0)),
                ('checksum', models.TextField()),
                ('date_frozen', models.DateTimeField(blank=True, null=True)),
                ('file_format', models.CharField(max_length=200, null=True)),
                ('file_name', models.TextField()),
                ('file_path', models.TextField()),
                ('date_uploaded', models.DateTimeField()),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('project_identifier', models.CharField(blank=True, max_length=200, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical file',
                'verbose_name_plural': 'historical files',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDistribution_files',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('distribution', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.distribution')),
                ('file', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.file')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldistribution')),
            ],
            options={
                'verbose_name': 'HistoricalDistribution_files',
            },
        ),
        migrations.AddField(
            model_name='historicaldistribution',
            name='license',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.license'),
        ),
        migrations.AddField(
            model_name='historicaldistribution',
            name='system_creator',
            field=models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HistoricalDataStorage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.CharField(db_index=True, help_text='A unique id of the data storage', max_length=255)),
                ('endpoint_url', models.URLField(help_text='The root location or primary endpoint of the service (a Web-resolvable IRI).')),
                ('endpoint_description', models.TextField(help_text='A description of the services available via the end-points, including their operations, parameters etc.')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical data storage',
                'verbose_name_plural': 'historical data storages',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDatasetPublisher_homepage',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('cataloghomepage', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.cataloghomepage')),
                ('datasetpublisher', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datasetpublisher')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldatasetpublisher')),
            ],
            options={
                'verbose_name': 'HistoricalDatasetPublisher_homepage',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataCatalog_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('datacatalog', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldatacatalog')),
                ('language', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.language')),
            ],
            options={
                'verbose_name': 'HistoricalDataCatalog_language',
            },
        ),
        migrations.CreateModel(
            name='HistoricalContract',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('quota', models.BigIntegerField()),
                ('valid_until', models.DateTimeField()),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical contract',
                'verbose_name_plural': 'historical contracts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCatalogRecord',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('contract', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.contract')),
                ('data_catalog', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.datacatalog')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical catalog record',
                'verbose_name_plural': 'historical catalog records',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCatalogHomePage',
            fields=[
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('removal_date', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('url', models.URLField(help_text='valid url to the property definition', max_length=512)),
                ('title', django.contrib.postgres.fields.hstore.HStoreField(help_text='example: {"en":"title", "fi":"otsikko"}')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('system_creator', models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical catalog home page',
                'verbose_name_plural': 'historical catalog home pages',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAccessRights_license',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('accessrights', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accessrights')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicalaccessrights')),
                ('license', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.license')),
            ],
            options={
                'verbose_name': 'HistoricalAccessRights_license',
            },
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='access_type',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.accesstype'),
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicalaccessrights',
            name='system_creator',
            field=models.ForeignKey(blank=True, db_constraint=False, default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='distribution',
            name='files',
            field=models.ManyToManyField(related_query_name='distributions', to='core.File'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='license',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='distributions', to='core.license'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='system_creator',
            field=models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_distributions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='language',
            field=models.ManyToManyField(related_name='catalogs', to='core.Language'),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='publisher',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='catalogs', to='core.datasetpublisher'),
        ),
        migrations.AddField(
            model_name='datacatalog',
            name='system_creator',
            field=models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_datacatalogs', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='contract',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='records', to='core.contract'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='data_catalog',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='records', to='core.datacatalog'),
        ),
        migrations.AddField(
            model_name='catalogrecord',
            name='system_creator',
            field=models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_catalogrecords', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accessrights',
            name='access_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='access_rights', to='core.accesstype'),
        ),
        migrations.AddField(
            model_name='accessrights',
            name='license',
            field=models.ManyToManyField(related_name='access_rights', to='core.License'),
        ),
        migrations.AddField(
            model_name='accessrights',
            name='system_creator',
            field=models.ForeignKey(default=apps.common.helpers.get_technical_metax_user, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='core_accessrightss', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicaldistribution',
            name='dataset',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset'),
        ),
        migrations.CreateModel(
            name='HistoricalDataset_theme',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('theme', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.theme')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_theme',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset_language',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('language', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.language')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_language',
            },
        ),
        migrations.CreateModel(
            name='HistoricalDataset_field_of_science',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('m2m_history_id', models.AutoField(primary_key=True, serialize=False)),
                ('fieldofscience', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.fieldofscience')),
                ('history', models.ForeignKey(db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to='core.historicaldataset')),
                ('dataset', models.ForeignKey(blank=True, db_constraint=False, db_tablespace='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset')),
            ],
            options={
                'verbose_name': 'HistoricalDataset_field_of_science',
            },
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='first',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='last',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='previous',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='historicaldataset',
            name='replaces',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='dataset',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='distributions', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='access_rights',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='datasets', to='core.accessrights'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='field_of_science',
            field=models.ManyToManyField(blank=True, related_name='datasets', to='core.FieldOfScience'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='first',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='first_version', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='language',
            field=models.ManyToManyField(blank=True, related_name='datasets', to='core.Language'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='last',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_version', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='previous',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='replaces',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replaced_by', to='core.dataset'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='theme',
            field=models.ManyToManyField(blank=True, related_name='datasets', to='core.Theme'),
        ),
    ]
